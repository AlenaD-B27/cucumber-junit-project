DDT: DATA DRIVEN TESTING FRAMEWORK

 - Data Driven Testing: Executing the same tests against different test data.

 - Data Driven Testing Framework:
  - It is the framework we are able to read data from an external file and use it in our source code.

  - We can get data from:
   - MS Excel
   - MS Access
   - Database
   - Feature Files
   - configuration.properties


-------------------------------------------------------------

- Keyword Driven Testing Framework:
  - Creating testing structure based on some  keywords that are executable
  - This requires a lot of time to invest in to even make it work, but also it is hard to maintain,and hard to scale since the object repositories and keyword repositories have to maintained  and expanded as the framework gets bigger


-------------------------------------------------------------


MVP: MINIMAL VIABLE PRODUCT

- TDD: TEST DRIVEN DEVELOPMENT: (BUG FREE DEVELOPMENT)
 - There is a repeating development cycle with TDD

#1. Write tests before writing any source code.
#2. Run the tests and it will fail
#3. Write minimum amount of code to make the tests pass
#4. Run the tests again.
#5. Optionally Refactor the test scripts and REPEAT
#6. Test will pass.


- In TDD developers are writing @Test in preferred Programming Language
- That's why it is not readable or understandable for non-tech team members of the team
- That is why we will be usin BDD


------------------------------------------------------------

BDD: BEHAVIOR DRIVEN DEVELOPMENT

- BDD has 2 layers:

 #1. Business Layer: FEATURE FILES
  - Feature files will be storing different features, scenarios, and reusable steps in GHERKIN language
  - Business side is mostly for collabration with non-tech people

 #2. Implemantation Layer: STEP DEFINITIONS
  - technical people implement the "Step Definitions" to convert steps (from feture file) into concrete actions (using java-selenium code)


-------------------------------------------------------------


- Why are we NOT using TESTNG and using JUNIT?

 #1. Because the community mostly using CUCUMBER with JUNIT
  - more help from getting answers of your questions
  - more opportunities
  - more demand

 #2. We don't need all of the annotations coming from TESTNG because cucumber is already giving us all power to do our testing like data-drivern testing....


 - Is CUCUMBER a testing tool?
  - No,it is not.
  - Cucumber is just a BDD implementation tool
  - Therefore, it does not come with any assertions or any programming language
  - That is why we have to use the dependencies with "cucumber-java" and "cucmber-junit"
    to be able to develop some programming logic and also be able to generate some test approach with assertions


TESTNG Assertions: Assert.assertTrue(boolean,"Failure message")
                   Assert.assertEquals(actual,expected,"Failure message")


JUNIT Assertions: Assert.assertTrue("Failure message",boolean)
                  Assert.assertEquals("Failure message",expected,actual)


-------------------------------------------------------------

- GIVEN, WHEN, AND, THEN, BUT
 --> All of these keywords we use in feature files are only for communication purpose
 --> They don't change the functionality of the step_definitions

 - Our code will be executed in the order we create in the feature files
 - Each scenario will executed by top to bottom, and each step will be creating it step_definition method from its own package and class

- GIVEN: is used fro pre-conditions

Ex: Given user is already on login page
    Given user already on home page
    Given user already login to the page



WHEN: is used fro when some actions happen

 Ex: When user enters username
     When user clicks submit button
     When users search for something


AND: is used for when you many repeating lines of any keyword

BUT: is similar for "AND" but for when we are comparing or some negative scenario happening

THEN: is used for when the verification is happening

      - Then user should see title of the page
      - Then user should be on dasboard page


--------------------------------------------------------

TAGS: Tags are used to group different scenarios together

- We can use tags to include or exclude some scenarios

- If we put the @tag on top of the .feature file, it will effect whole feature file/all scenarios
- If we put it on the top of a Scenario, it will only effect that scenario
- You can have as many as tags you want for feature file or scenario


- How do we include or exclude different tags together?

- How do we use different tags together?


or:
  - "or" keyword can be used fro checking condition
  - when we use "or" we are being less specific, less selective
  - if either one of the tags are matching, the scenario or feature will be executed
  - "or" is like "||" in Java
  - if either one sides are matching, it will execute the scenario or feature file


 and:
  - "and" keyword can be used for checking condition as well
  - when we use "and" keyword we are being more specific
  - "and" is like "&&" in Java
  - the tags  on both side has to be matching for a scenario or feature


 and not:
  - "and not" keyword can be used excluding conditions

  Ex: @Regression and not @student


-------------------------------------------------------------------------------------

- What is framework?
 - Frameworks are basically commonly used and proven approach of creating file and folder structure, creating smart logic (implementing design patterns,utilities) to be able to easily hndle and maintain project

 - Why do we create framework?
  - Frameworks are created to apply reusability, maintainabilitily, easy to use, easy to understand, .....


 - TELL ME ABOUT YOUR FRAMEWORK???

  - Bacically they want to hear how you created your framework, what we used in it.

  - What tools we used in our project?
  - Which programming language we used in project?
  - Which testing tools we used in out project and why?
  - Which design pattern we used in out project and why?
  - What kind of folder structure we created and why?


- I used Java as prgramming language in my framework.
- I used Selenium for main automation tool that I can find elements do actions used methods all coming from selenium library
- Maven build tool
- Cucumber for adding behave to my framework that everybody even non-tech people can understand
- Junit for testing tool in my framework but I have knowledge for TestNG as well


- Design patterns:
  - Page Object Model Design Pattern: I centralize all elements in related page classes
  - Singleton Design Pattern : to use single instance driver I have Driver class in utilities package

- Utilities classes we created:
  - Driver --> Singleton Design Pattern
  - ConfigurationReader --> reading .properties file
  - BrowserUtils --> We have utility methods to keep cleaner our classes to not repeat line of codes


- We implemented BDD approach
- We also implemented DDT(Data Driven Testing) in our framework


-----------------------------------------------------------------------

- What is BDD (Behavior Driven Development) ?
 - BDD is extension of TDD
 - It means overall implemented logic is very similar

- How BDD is similar to TDD?
 - Instead of writing test script, we write SCENARIOS
 - We implement logic that turns those scenarios into actions using JAVA+SELENIUM+JUNIT

- What are the 2 different sides(layer) of BDD ?
 #1. BUSINESS LAYER : feature files
 #2. IMPLENTATION LAYER : step definitions


#1. BUSINESS LAYER : feature files
 - Where we write our features and scenarios in Gherkin language
 - Gherkin language is basiccaly English
 - It makes it very easy to understand for non-tech member of the team
 - We use certain keywords to implement Cucumber logic in fetaure files
  - Feature
  - Scenario - Scenario Outline - Scenario Template
  - Given , When, Then, And, But


#2. IMPLENTATION LAYER : step definitions
 - We generate snippets and implement them in "step_definitions" package

 - What is a snippet?
  - unimplemented step definition methods that are automatically generated by CUCUMBER


- Different ways of generating snippets?

#1. Run the Runner class by using dryRun option and generate the snippets in console
#2. Hover over the unimplemented step:
     - Create step definition --> Select class where we want it
     - More options --> Create all steps --> Select class where we want it
- Put your cursor on unimplemented line:
   Windows: Alt + Enter --> Create step definition --> Select class where we want it
   Mac: Option + Enter --> Create step definition --> Select class where we want it

#3. Run unimplemented scenario from fetaure file

----------------------------------------------

- DRYRUN: turns on and off the running of step_definitions

- If I do not want to actually run my code, and just want to get unimplemente snippets, I will tun dryRun on by giving "true" value

- dryRun = true --> do not run my step_definitions, but only check if any step is missing snippet
- dryRun = false --> this will turn off dryRun and our code will run as expected


----------------------------------------------

- Background:
 - It is very similar to @BeforeMethod in TestNG
 - It runs before each Scenario in that specific feature file
 - The step we pass under the Background: will execute onlt once before each step

 - Important thing to keep on mind is that "Background:" will be applying to each and every scenario in the same feature file
 - Therefore we must make sure every scenario is able to pick up and continue where the background is leaving the code


 ---------------------------------------------

 - HOOKS:

  - Hooks class will allow us to pass pre and post conditions for each scenario
  - Hooks class is separated  from feature file
  - Therefore it will go into the implementation side (step_definitions)

- How does my framework knows where to find Hooks class and execute the annotations?
 - Basically logic is coming from cucumber annotations and also glue path we provide in the runner class

- Can we create more than one  @Before, @After, @BeforeStep, @AfterStep
- Yes.

- If we have multiple versions of the same annotation, we can prioritize the running order using the "order" keyword.

- The lower the number passed in the order, earlier it will executed.
- The methods will be executed in the order it is specified with numbers.

    @Before (order = 1)
    public void setupScenario(){
        System.out.println("====Setting up browser using cucumber @Before");
    }

    @Before (value = "@login", order = 2)
    public void setupScenarioForLogins(){
        System.out.println("====this will only apply to scenarios with @login tag");
    }

- We can specify which annotation is running for which scenarios or features using @TAGS.
- If I want some scenario/feature to have pre- /post- conditions, I can use certain @TAG, and pass the same @TAG into the annotation in Hooks class.


@Before
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running BEFORE each and every SCENARIO in our project (unless we specify with @TAGS)

@After
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running AFTER each and every SCENARIO in our project (unless we specify with @TAGS)

@BeforeStep
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running BEFORE each and every STEP in our project (unless we specify with @TAGS)

@AfterStep
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running AFTER each and every STEP in our project (unless we specify with @TAGS)